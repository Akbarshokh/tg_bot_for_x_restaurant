import random
from aiogram import Router, types
from aiogram.types import  ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from states.user import Registration
from utils.db import PgConn
from datetime import datetime, timedelta
from sqlalchemy import text
from aiogram.filters import CommandStart
from keyboards.inline.user_inline_keyboards import language_keyboard

from loader import dp
router = Router()
dp.include_router(router)
db = PgConn()

@router.message(CommandStart())
async def start_registration(message: types.Message):
    # kb_list = [
    #     [KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π")],
    #     [KeyboardButton(text="üá∫üáø O'zbekcha")]
    # ]
    # keyboard = ReplyKeyboardMarkup(keyboard=kb_list, resize_keyboard=True, one_time_keyboard=True)

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Iltimos, tilni tanlang:", reply_markup=language_keyboard)
    # await state.set_state(Registration.language)

# @router.message(Registration.language)
# async def set_language(message: types.Message, state: FSMContext):
#     lang = "ru" if message.text == "–†—É—Å—Å–∫–∏–π" else "uz"
#     await state.update_data(language=lang)
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è / Ismingizni kiriting:", reply_markup=types.ReplyKeyboardRemove())
#     await state.set_state(Registration.name)

@router.callback_query(lambda c: c.data in ["ru", "uz"])
async def set_language(call : types.CallbackQuery, state: FSMContext):
    lang = call.data
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è / Ismingizni kiriting:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(Registration.name)
    



@router.message(Registration.name)
async def set_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    if 2 <= len(name) <= 50:
        await state.update_data(name=name)
        kb_list =[
           [KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True, one_time_keyboard=True)]
        ]
        keyboard = ReplyKeyboardMarkup(keyboard=kb_list, resize_keyboard=True)
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=keyboard)
        await state.set_state(Registration.phone)
    else:
        await message.answer("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.message(Registration.phone)
async def set_phone(message: types.Message, state: FSMContext):
    if message.contact and message.contact.phone_number:
        phone = message.contact.phone_number
        otp = str(random.randint(100000, 999999))
        expires_at = datetime.now() + timedelta(minutes=5)

        # –∫–æ–¥--–≤—Ä–µ–º–µ–Ω–Ω–æ
        print(otp)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º SMS-–∫–æ–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        success = db.generate_otp(phone, otp, expires_at)

        if success:
            await state.update_data(phone=phone)
            await message.answer(f"–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ SMS —Å –∫–æ–¥–æ–º –Ω–∞ –Ω–æ–º–µ—Ä {phone}. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥:")
            await state.set_state(Registration.confirmation)
        else:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ SMS.")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")

@router.message(Registration.confirmation)
async def verify_code(message: types.Message, state: FSMContext):
    phone = (await state.get_data()).get("phone")
    entered_code = message.text

    # Checking code from DB
    otp_record = db.get_otp_by_phone(phone)

    if otp_record:
        db_otp, expires_at, is_verified = otp_record

        if is_verified:
            await message.answer("–≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
        elif datetime.now() > expires_at:
            await message.answer("–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –∏—Å—Ç—ë–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        elif db_otp == entered_code:
            _ = db.verify_otp(phone, entered_code)

            user_data = {
                "telegram_id": message.from_user.id,
                "phone": phone,
                "name": (await state.get_data()).get("name"),
                "language": (await state.get_data()).get("language")
            }

            # Saving user data into DB
            _ = db.save_user(user_data)

            await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
            await state.clear()
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        await message.answer("–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π.")


@router.message(lambda message: message.text.lower() in ["–ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∫–æ–¥", "–ø–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞"])
async def resend_code(message: types.Message, state: FSMContext):
    data = await state.get_data()
    phone = data.get('phone')
    otp = str(random.randint(100000, 999999))
    expires_at = datetime.now() + timedelta(minutes=5)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db.conn.execute(
        text("UPDATE sms_verifications SET otp=:otp, expires_at=:expires_at WHERE phone=:phone"),
        {"otp": otp, "expires_at": expires_at, "phone": phone}
    )

    await message.answer(f"–ù–æ–≤—ã–π –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä {phone}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SMS.")
